[Service 1 (100qps) Publisher] â€”â€”â€”â€”â€”> message queue [msgi, msg2 ... msg 160] -â€”â€”â€”â€”â€”â€”â€”>[Service 2 (20qps) Subscriber]
[Service 2 (Publisher)] ä¸€-ä¸€ä¸€ message queue [msgs] â€”â€”> [Servivce 1 (subcriber)]



leetcode backend (how to test case work.)

[input text 1] -> [output text]
submit -> [submission text]




Exchange (short notes) 
           |
    Acts like a router / post office ðŸ“¦

    Producer â†’ Exchange â†’ Queue(s)

    Does not store messages (only routes them)

    Needs bindings to connect queues

    Types:

    Direct â†’ exact match routing key

    Fanout â†’ broadcast to all queues

    Topic â†’ pattern-based (user.*, order.#)

    Headers â†’ match on headers





RabbitMQ => In BookingService msg should be published and In ReminderService msg should be subcribed.



Write-Host @"
          +-------------+
          |   Publisher |
          +-------------+
                 |
                 v
          +-------------+
          |   Exchange  |
          +-------------+
            /     |     \
           /      |      \
          v       v       v
   +---------+ +---------+ +---------+
   | Queue 1 | | Queue 2 | | Queue 3 |
   +---------+ +---------+ +---------+
      |           |           |
      v           v           v
+-----------+ +-----------+ +-----------+
| Consumer1 | | Consumer2 | | Consumer3 |
+-----------+ +-----------+ +-----------+
"@
